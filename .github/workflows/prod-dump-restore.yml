name: Dump and Restore | PostgreSQL

on:
  schedule:
    - cron: '0 0 * * *' # Runs at midnight ET (us-east-1)
  workflow_dispatch:

jobs:
  dump-and-restore:
    runs-on: ubuntu-latest

    env:
      PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }} # Production or primary database
      DEV_DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }} # Development database
      SSL_CERT_BASE64: ${{ secrets.SSL_CERT_BASE64 }}
      PG_VERSION: '16'
      NODE_VERSION: '20.x' # Specify Node.js version 20 for all steps

    outputs:
      database_size: ${{ steps.query-db-size.outputs.size }}

    steps:
      - name: Decode SSL Cert
        run: |
          echo "${{ secrets.SSL_CERT_BASE64 }}" | base64 --decode > us-east-1-bundle.pem

      - name: Install PostgreSQL
        run: |
          sudo apt update
          yes '' | sudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh
          sudo apt install -y postgresql-${{ env.PG_VERSION }}

      - name: Get timestamp
        id: timestamp
        run: |
          echo "TIMESTAMP=$(date +%d-%B-%Y_%H-%M-%S)" >> $GITHUB_ENV

      - name: Dump from RDS
        run: |
          /usr/lib/postgresql/${{ env.PG_VERSION }}/bin/pg_dump "${{ env.PROD_DATABASE_URL }}" -Fc -f "${{ github.workspace }}/backup-${{ env.TIMESTAMP }}.dump"

      - name: Upload backup file
        uses: actions/upload-artifact@v4
        with:
          name: database-backup
          path: '${{ github.workspace }}/backup-${{ env.TIMESTAMP }}.dump'

      - name: Download backup file
        uses: actions/download-artifact@v4
        with:
          name: database-backup
          path: '${{ github.workspace }}'

      - name: Query DB Size
        id: query-db-size
        run: |
          db_size=$(/usr/lib/postgresql/${{ env.PG_VERSION }}/bin/psql "${{ env.PROD_DATABASE_URL }}" -t -c "SELECT pg_database_size(current_database());")

          echo "Database size query result: $db_size"
          echo "size=$db_size" >> $GITHUB_OUTPUT

      - name: Restore to Neon
        run: |
          /usr/lib/postgresql/${{ env.PG_VERSION }}/bin/pg_restore --clean --no-owner --no-acl --if-exists -d "${{ env.DEV_DATABASE_URL }}" "${{ github.workspace }}/backup-${{ env.TIMESTAMP }}.dump"

  post-to-slack-webhook:
    runs-on: ubuntu-latest
    needs: dump-and-restore # Ensures this job runs after dump-and-restore

    env:
      DATABASE_SIZE: ${{ needs.dump-and-restore.outputs.database_size }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Run the JavaScript script
        run: |
          node src/index.js
